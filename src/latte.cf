-- Programs ------------------------------------------------
entrypoints Program ;
Prog.      Program ::= [TopDef] ;
FnDef.     TopDef ::= Type Ident "(" [Arg] ")" Block ;
ClDef.     TopDef ::= "class" Ident ClProps "{" [ClBody] "}" ;
separator nonempty TopDef "" ;

Ar.        Arg ::= Type Ident;
separator  Arg "," ;

-- Statements ----------------------------------------------
Blk.       Block ::= "{" [Stmt] "}" ;
separator  Stmt "" ;
Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= Type [Item] ";" ;
NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;

-- LHSs for these shouldn't really be expressions, but doing that in bnfc seems
-- impossible without absurd s/r conflicts, so we check if Expr is an LValue
-- during semantic analysis:
Ass.       Stmt ::= Expr "=" Expr ";" ;
Incr.      Stmt ::= Expr "++" ";" ;
Decr.      Stmt ::= Expr "--" ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
For.       Stmt ::= "for" "(" Ident Ident ":" Expr ")" Stmt ;
SExp.      Stmt ::= Expr ";" ;

-- Types ---------------------------------------------------
TCls.      Type ::= Ident ;
TArr.      Type ::= Ident "[]" ;

-- Expressions ---------------------------------------------
EVar.      Expr11 ::= Ident ;
EApp.      Expr11 ::= Expr10 "(" [Expr] ")" ;
EClMem.    Expr10 ::= Expr9 "." Ident ;
EArrApp.   Expr9 ::= Expr8 "[" Expr "]" ;
ENew.      Expr8 ::= "new" Type ;
ENewArr.   Expr8 ::= "new" Type "[" Expr "]" ;
ELitInt.   Expr7 ::= Integer ;
ELitStr.   Expr7 ::= String ;
ELitTrue.  Expr7 ::= "true" ;
ELitFalse. Expr7 ::= "false" ;
ENull.     Expr7 ::= "null" ;
Neg.       Expr6 ::= "-" Expr6 ;
Not.       Expr6 ::= "!" Expr6 ;
ECast.     Expr5 ::= "(" Ident ")" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EEq.       Expr2 ::= Expr2 EqOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 11 ;
separator  Expr "," ;

-- Classes -------------------------------------------------
CBVar.     ClBody ::= Type Ident ";" ;
CBFnDef.   ClBody ::= Type Ident "(" [Arg] ")" Block ;
separator nonempty ClBody "" ;

CNone.     ClProps ::= ;
CExtends.  ClProps ::= "extends" Ident ;

-- Operators -----------------------------------------------
Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
NE.        EqOp ::= "!=" ;
EQU.       EqOp ::= "==" ;

-- Comments ------------------------------------------------
comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
