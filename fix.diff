diff --git a/src/frontend.c b/src/frontend.c
index b1e7f93..d3703d6 100644
--- a/src/frontend.c
+++ b/src/frontend.c
@@ -451,7 +451,7 @@ process_params(ListExpr arg_exprs, d_func* fun, void* node, ir_quadr** ir)
             else
             {
                 preprocessed_jump_expr* pre_buf = 0;
-                preprocessed_jump_expr pre = preprocess_jumping_expr(argexpr, &pre_buf, 0);
+                preprocessed_jump_expr pre = preprocess_jumping_expr(argexpr, &pre_buf);
                 got_type_id = TYPEID_BOOL;
 
                 if (pre.kind == PRJE_CONST)
@@ -547,7 +547,7 @@ process_assignment_expr(Expr e2, ir_val variable_val, ir_quadr** ir, b32 is_addr
     else
     {
         preprocessed_jump_expr* pre_buf = 0;
-        preprocessed_jump_expr pre = preprocess_jumping_expr(e2, &pre_buf, 0);
+        preprocessed_jump_expr pre = preprocess_jumping_expr(e2, &pre_buf);
 
         if (UNLIKELY(pre.kind == PRJE_CONST))
         {
@@ -1322,25 +1322,26 @@ process_expr(Expr e, ir_quadr** ir, b32 addr_only)
 }
 
 static preprocessed_jump_expr
-preprocess_jumping_expr(Expr e, preprocessed_jump_expr** buf, b32 reverse)
+preprocess_jumping_expr_(Expr e, preprocessed_jump_expr** buf, b32 reverse)
 {
     switch (e->kind) {
     case is_EAnd:
     case is_EOr:
     {
-        preprocessed_jump_expr ee1 = preprocess_jumping_expr(e->u.eand_.expr_1, buf, reverse);
-        preprocessed_jump_expr ee2 = preprocess_jumping_expr(e->u.eand_.expr_2, buf, reverse);
+        preprocessed_jump_expr ee1 = preprocess_jumping_expr_(e->u.eand_.expr_1, buf, reverse);
+        preprocessed_jump_expr ee2 = preprocess_jumping_expr_(e->u.eand_.expr_2, buf, reverse);
         u32 op = (e->kind == is_EAnd) ^ reverse ? BIN_OP_AND : BIN_OP_OR;
 
-        int lhs_const = reverse ? !ee1.u.constant : !!ee1.u.constant;
-        int rhs_const = reverse ? !ee2.u.constant : !!ee2.u.constant;
+        int lhs_const = ee1.reversed ? !ee1.u.constant : !!ee1.u.constant;
+        int rhs_const = ee2.reversed ? !ee2.u.constant : !!ee2.u.constant;
 
         if (UNLIKELY(ee1.kind == PRJE_CONST && ee2.kind == PRJE_CONST))
         {
             ee1.u.constant =
                 ((e->kind == is_EAnd) ^ reverse
-                 ? (!!ee1.u.constant) && (!!ee2.u.constant)
-                 : (!!ee1.u.constant) || (!!ee2.u.constant));
+                 ? (lhs_const && rhs_const)
+                 : (lhs_const || rhs_const));
+            ee1.reversed = 0;
 
             return ee1;
         }
@@ -1401,7 +1402,7 @@ preprocess_jumping_expr(Expr e, preprocessed_jump_expr** buf, b32 reverse)
 
     case is_Not:
     {
-        return preprocess_jumping_expr(e->u.not_.expr_, buf, !reverse);
+        return preprocess_jumping_expr_(e->u.not_.expr_, buf, !reverse);
     }
 
     case is_ECast:
@@ -1466,6 +1467,17 @@ preprocess_jumping_expr(Expr e, preprocessed_jump_expr** buf, b32 reverse)
     NOTREACHED;
 }
 
+static preprocessed_jump_expr
+preprocess_jumping_expr(Expr e, preprocessed_jump_expr** buf)
+{
+    preprocessed_jump_expr retval = preprocess_jumping_expr_(e, buf, 0);
+    if (retval.reversed && retval.kind == PRJE_CONST)
+        retval.u.constant = !retval.u.constant;
+
+    return retval;
+
+}
+
 static void
 process_jumping_expr(ir_quadr** ir,
                      preprocessed_jump_expr* e,
@@ -1570,7 +1582,7 @@ process_stmt(Stmt s, u32 return_type, i32 cur_block_id, ir_quadr** ir)
         else
         {
             preprocessed_jump_expr* pre_buf = 0;
-            preprocessed_jump_expr pre = preprocess_jumping_expr(ex, &pre_buf, 0);
+            preprocessed_jump_expr pre = preprocess_jumping_expr(ex, &pre_buf);
 
             // Constant statement-expression can be safetly ignored
             if (pre.kind != PRJE_CONST)
@@ -1734,7 +1746,7 @@ process_stmt(Stmt s, u32 return_type, i32 cur_block_id, ir_quadr** ir)
         i32 l_end = g_label++;
 
         preprocessed_jump_expr* pre_buf = 0;
-        preprocessed_jump_expr pre = preprocess_jumping_expr(abs_expr, &pre_buf, 0);
+        preprocessed_jump_expr pre = preprocess_jumping_expr(abs_expr, &pre_buf);
 
         if (UNLIKELY(pre.kind == PRJE_CONST))
         {
@@ -1827,7 +1839,7 @@ process_stmt(Stmt s, u32 return_type, i32 cur_block_id, ir_quadr** ir)
         b32 all_branches_return = 0;
 
         preprocessed_jump_expr* pre_buf = 0;
-        preprocessed_jump_expr pre = preprocess_jumping_expr(condexpr, &pre_buf, 0);
+        preprocessed_jump_expr pre = preprocess_jumping_expr(condexpr, &pre_buf);
 
         if (UNLIKELY(pre.kind == PRJE_CONST))
         {
diff --git a/src/frontend.h b/src/frontend.h
index 1973b07..c7c8e01 100644
--- a/src/frontend.h
+++ b/src/frontend.h
@@ -191,7 +191,7 @@ struct jump_ctx
 static void process_jumping_expr(
     ir_quadr** ir, preprocessed_jump_expr* e, preprocessed_jump_expr* const pre_buf, jump_ctx ctx);
 static preprocessed_jump_expr preprocess_jumping_expr(
-    Expr e, preprocessed_jump_expr** buf, b32 reverse);
+    Expr e, preprocessed_jump_expr** buf);
 static processed_expr process_expr(Expr e, ir_quadr** ir, b32 addr_only);
 static processed_stmt process_stmt(Stmt s, u32 return_type, i32 cur_block_id, ir_quadr** ir);
 static void process_params(ListExpr arg_exprs, d_func* fun, void* node, ir_quadr** ir);
